{"ast":null,"code":"var _jsxFileName = \"/home/jeffrey/Weather-App/src/SearchBar.js\";\nimport React from 'react';\nimport Script from 'react-load-script';\n/*global google*/\n\nclass Search extends React.Component {\n  // Define Constructor\n  constructor(props) {\n    super(props); // Declare State\n\n    this.handleScriptLoad = () => {\n      // Declare Options For Autocomplete\n      const options = {\n        types: ['(cities)']\n      }; // Initialize Google Autocomplete\n\n      /*global google*/\n      // To disable any eslint 'google not defined' errors\n\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components and formatted\n      // address.\n\n      this.autocomplete.setFields(['address_components', 'formatted_address']); // Fire Event when a suggested name is selected\n\n      this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    };\n\n    this.handlePlaceSelect = () => {\n      // Extract City From Address Object\n      const addressObject = this.autocomplete.getPlace();\n      const address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        // Set State\n        this.setState({\n          city: address[0].long_name,\n          query: addressObject.formatted_address\n        });\n      }\n    };\n\n    this.state = {\n      city: '',\n      query: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCnqBcICpcIUF4OcyIjqIEoIMXYOXqZnG8&libraries=places\",\n      onLoad: this.handleScriptLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"textbox\",\n      id: \"autocomplete\",\n      placeholder: \"\",\n      value: this.state.query,\n      style: {\n        margin: '0 auto',\n        maxWidth: 800\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/home/jeffrey/Weather-App/src/SearchBar.js"],"names":["React","Script","Search","Component","constructor","props","handleScriptLoad","options","types","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","setState","city","long_name","query","formatted_address","state","render","margin","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA;;AAEA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AACjC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAWnBC,gBAXmB,GAWA,MAAM;AACvB;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAE,CAAC,UAAD;AADO,OAAhB,CAFuB,CAMvB;;AACA;AAAkB;;AAClB,WAAKC,YAAL,GAAoB,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAClBC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CADkB,EAElBR,OAFkB,CAApB,CARuB,CAavB;AACA;AACA;;AACA,WAAKE,YAAL,CAAkBO,SAAlB,CAA4B,CAAC,oBAAD,EAAuB,mBAAvB,CAA5B,EAhBuB,CAkBvB;;AACA,WAAKP,YAAL,CAAkBQ,WAAlB,CAA8B,eAA9B,EAA+C,KAAKC,iBAApD;AACD,KA/BkB;;AAAA,SAiCnBA,iBAjCmB,GAiCC,MAAM;AAExB;AACA,YAAMC,aAAa,GAAG,KAAKV,YAAL,CAAkBW,QAAlB,EAAtB;AACA,YAAMC,OAAO,GAAGF,aAAa,CAACG,kBAA9B,CAJwB,CAMxB;;AACA,UAAID,OAAJ,EAAa;AACX;AACA,aAAKE,QAAL,CACE;AACEC,UAAAA,IAAI,EAAEH,OAAO,CAAC,CAAD,CAAP,CAAWI,SADnB;AAEEC,UAAAA,KAAK,EAAEP,aAAa,CAACQ;AAFvB,SADF;AAMD;AACF,KAjDkB;;AAIjB,SAAKC,KAAL,GAAa;AACXJ,MAAAA,IAAI,EAAE,EADK;AAEXE,MAAAA,KAAK,EAAE;AAFI,KAAb;AAKD;;AA2CDG,EAAAA,MAAM,GAAG;AACL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,sGADN;AAEE,MAAA,MAAM,EAAE,KAAKvB,gBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAO,MAAA,IAAI,EAAG,SAAd;AAAwB,MAAA,EAAE,EAAC,cAA3B;AAA0C,MAAA,WAAW,EAAC,EAAtD;AAA0D,MAAA,KAAK,EAAE,KAAKsB,KAAL,CAAWF,KAA5E;AACE,MAAA,KAAK,EAAE;AACLI,QAAAA,MAAM,EAAE,QADH;AAELC,QAAAA,QAAQ,EAAE;AAFL,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAcD;;AArE8B;;AAwErC,eAAe7B,MAAf","sourcesContent":["import React from 'react'\n\nimport Script from 'react-load-script';\n/*global google*/\n\nclass Search extends React.Component {\n    // Define Constructor\n    constructor(props) {\n      super(props);\n  \n      // Declare State\n      this.state = {\n        city: '',\n        query: ''\n      };\n  \n    }\n  \n    handleScriptLoad = () => {\n      // Declare Options For Autocomplete\n      const options = {\n        types: ['(cities)'],\n      };\n  \n      // Initialize Google Autocomplete\n      /*global google*/ // To disable any eslint 'google not defined' errors\n      this.autocomplete = new google.maps.places.Autocomplete(\n        document.getElementById('autocomplete'),\n        options,\n      );\n  \n      // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components and formatted\n      // address.\n      this.autocomplete.setFields(['address_components', 'formatted_address']);\n  \n      // Fire Event when a suggested name is selected\n      this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    }\n    \n    handlePlaceSelect = () => {\n  \n      // Extract City From Address Object\n      const addressObject = this.autocomplete.getPlace();\n      const address = addressObject.address_components;\n  \n      // Check if address is valid\n      if (address) {\n        // Set State\n        this.setState(\n          {\n            city: address[0].long_name,\n            query: addressObject.formatted_address,\n          }\n        );\n      }\n    }\n    \n    \n    render() {\n        return (\n          <div>\n            <Script\n              url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCnqBcICpcIUF4OcyIjqIEoIMXYOXqZnG8&libraries=places\"\n              onLoad={this.handleScriptLoad}\n            />\n            <input type = 'textbox' id=\"autocomplete\" placeholder=\"\"  value={this.state.query}\n              style={{\n                margin: '0 auto',\n                maxWidth: 800,\n              }}\n            />\n          </div>\n        );\n      }\n}\n\nexport default Search"]},"metadata":{},"sourceType":"module"}