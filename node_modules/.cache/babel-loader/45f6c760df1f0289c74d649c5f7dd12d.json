{"ast":null,"code":"var _jsxFileName = \"/home/jeffrey/Weather-App/src/SearchBar.js\";\nimport React from 'react';\nimport Script, { geocodeByAddress, getLatLng } from 'react-load-script';\n/*global google*/\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleScriptLoad = () => {\n      const options = {\n        types: ['(cities)']\n      };\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options);\n      this.autocomplete.setFields(['geometry']); //limit field to geometry\n    };\n\n    this.handleSubmit = event => {\n      const addressObject = this.autocomplete.getPlace();\n      this.props.update({\n        lat: addressObject.geometry.location.lat(),\n        lng: addressObject.geometry.location.lng()\n      });\n      console.log(addressObject.geometry.location.lng());\n      event.preventDefault();\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const lat = this.state.lat;\n    const lng = this.state.lng;\n    fetch(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/db3b0ba27138ac7fdc854f5529ba7e78/\".concat(lat, \",\").concat(lng)).then(results => results.json()).then(response => {\n      this.setState({\n        temperature: response.currently.temperature,\n        humidity: response.currently.humidity,\n        wind: response.currently.windSpeed,\n        icon: response.currently.icon,\n        precipType: response.currently.precipType,\n        precipProbability: response.currently.precipProbability,\n        summary: response.currently.summary\n      });\n      console.log(response);\n      console.log(lat, lng);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCnqBcICpcIUF4OcyIjqIEoIMXYOXqZnG8&libraries=places\",\n      onLoad: this.handleScriptLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"search-text\",\n      type: \"textbox\",\n      id: \"autocomplete\",\n      placeholder: \"Type your city\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \" submit\"))));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/home/jeffrey/Weather-App/src/SearchBar.js"],"names":["React","Script","geocodeByAddress","getLatLng","Search","Component","constructor","props","handleScriptLoad","options","types","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","handleSubmit","event","addressObject","getPlace","update","lat","geometry","location","lng","console","log","preventDefault","bind","componentDidMount","state","fetch","then","results","json","response","setState","temperature","currently","humidity","wind","windSpeed","icon","precipType","precipProbability","summary","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport Script, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-load-script';\n/*global google*/\n\nclass Search extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleSubmit = this.handleSubmit.bind(this)\n  \n    }\n  \n    handleScriptLoad = () => {\n      const options = {\n        types: ['(cities)'],\n      };\n  \n       this.autocomplete = new google.maps.places.Autocomplete(\n        document.getElementById('autocomplete'),\n        options,\n      );\n      this.autocomplete.setFields(['geometry']) //limit field to geometry\n\n      \n    }\n    \n    handleSubmit = (event) => {\n      const addressObject = this.autocomplete.getPlace();\n        this.props.update(\n          {\n            lat: addressObject.geometry.location.lat(),\n            lng: addressObject.geometry.location.lng(),\n          }\n        );\n      console.log (addressObject.geometry.location.lng())\n      event.preventDefault()\n      \n    }\n    componentDidMount () {\n      const lat = this.state.lat;\n      const lng = this.state.lng;\n      \n\n      fetch (`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/db3b0ba27138ac7fdc854f5529ba7e78/${lat},${lng}`)\n      .then (results => results.json())\n      .then (response => {\n          this.setState ({\n              temperature: response.currently.temperature,\n              humidity: response.currently.humidity,\n              wind: response.currently.windSpeed,\n              icon: response.currently.icon,\n              precipType: response.currently.precipType,  \n              precipProbability: response.currently.precipProbability,\n              summary: response.currently.summary,\n\n          })\n          console.log(response)\n          console.log(lat,lng)\n      })\n  } \n    \n  \n    render() {\n        return (\n          <div>\n            <Script\n              url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCnqBcICpcIUF4OcyIjqIEoIMXYOXqZnG8&libraries=places\"\n              onLoad={this.handleScriptLoad}\n            />\n            <div className = 'search-box'>\n            <form onSubmit = {this.handleSubmit}>\n              <input className = 'search-text'type = 'textbox' id=\"autocomplete\" placeholder=\"Type your city\"  \n              />\n              <button> submit</button>\n              \n            </form>\n              \n            </div>\n          </div>\n        );\n      }\n}\n\nexport default Search"]},"metadata":{},"sourceType":"module"}