{"version":3,"sources":["Header.js","SearchBar.js","WeatherDisplay.js","Display.js","App.js","index.js"],"names":["Header","className","Search","props","handleScriptLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","types","setFields","handleSubmit","event","addressObject","getPlace","update","lat","geometry","location","lng","preventDefault","state","bind","url","onLoad","this","onSubmit","type","id","placeholder","src","React","Component","WeatherDisplay","defaults","icon","data","replace","toUpperCase","displayIcon","summary","Math","round","temperature","humidity","precipType","precipProbability","wind","Display","setState","prevProps","prevState","console","log","fetch","then","results","json","response","currently","windSpeed","SearchBar","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.d68eeff2.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return(\n    <div className = 'welcome'>\n        <h1> JC Weather</h1>\n    </div>\n    )\n}\n\nexport default Header","import React from 'react'\n\nimport Script from 'react-load-script';\n/*global google*/\n\nclass Search extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        lat: '',\n        lng: ''\n      }\n      this.handleSubmit = this.handleSubmit.bind(this)\n  \n    }\n  \n    handleScriptLoad = () => {\n      const options = {\n        types: ['(cities)'],\n      };\n  \n       this.autocomplete = new google.maps.places.Autocomplete(\n        document.getElementById('autocomplete'),\n        options,\n      );\n      this.autocomplete.setFields(['geometry']) //limit field to geometry\n\n      \n    }\n    \n    handleSubmit = (event) => {\n      const addressObject = this.autocomplete.getPlace();\n        this.props.update(\n          {\n            lat: addressObject.geometry.location.lat(),\n            lng: addressObject.geometry.location.lng(),\n          }\n        );\n      /*console.log (addressObject.geometry.location.lng()) */\n      event.preventDefault()\n      \n    }\n    \n  \n    render() {\n        return (\n          <div>\n            <Script\n              url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCnqBcICpcIUF4OcyIjqIEoIMXYOXqZnG8&libraries=places\"\n              onLoad={this.handleScriptLoad}\n            />\n            <div className = 'search-box'>\n              <form className = 'form' onSubmit = {this.handleSubmit}>\n                <input className = 'search-text'type = 'textbox' id=\"autocomplete\" placeholder=\"Type your city\"  \n                />\n                <button><img src = 'https://cdn.imgbin.com/17/18/14/imgbin-computer-icons-search-box-button-button-EJe5CdpnFg2GQA6h6PpqD5L9X.jpg'></img> \n                </button>\n              </form>\n            </div>\n          </div>\n        );\n      }\n}\n\nexport default Search","import React from 'react'\nimport ReactAnimatedWeather from 'react-animated-weather'\n\nfunction WeatherDisplay(props) {\n    const displayIcon = () => { \n        if (props.data.icon !== null) {\n            return props.data.icon.replace(/-/g,'_').toUpperCase()}\n    }\n    const defaults = {\n        icon: displayIcon()\n    }\n    \n        return (\n            <div>\n                \n                <div className = 'summary'> {props.data.summary} </div>\n                <div className = 'weatherContainer'>\n                    <div className = 'weatherGrid'>\n                        <div className = 'col1'> \n                            <p className = 'temperature'>{Math.round((5/9)*(props.data.temperature-32))} Â°C </p>\n                            <p className = 'humidity'>Humidity : {props.data.humidity}</p> \n                        </div>\n                        \n                        <div className = 'col2'>\n                            \n                            <div className = 'icon'>\n                            <ReactAnimatedWeather \n                            icon = {defaults.icon}\n                            />\n                           \n                            </div>\n                            </div>\n                        \n                        <div className = 'col3'>\n                            <p className = 'precipType'>Precipitation type: {props.data.precipType}</p>\n                            <p className = 'precipProbability'>Probability of precipitation: {props.data.precipProbability}</p>\n                            <p className = 'wind'>Windspeed: {props.data.wind}</p>\n                        </div>\n                        \n                    </div>\n                </div>\n             </div>\n             \n             \n        )\n\n}\n\n\n\n\nexport default WeatherDisplay\n\n","import React from 'react'\nimport SearchBar from './SearchBar'\nimport WeatherDisplay from './WeatherDisplay'\n\nclass Display extends React.Component{\n    constructor () {\n        super()\n        this.state = {\n            temperature : '',\n            humidity: '',\n            precipType: '',\n            precipProbability: '',\n            wind: '',\n            summary: '',\n            lat: '',\n            lng: '',\n            icon: 'CLEAR_DAY',\n            \n        }\n    }\n\n     \n    update = ({lat,lng}) => {\n        this.setState({\n            lat,lng\n        })\n    }\n    \n    componentDidUpdate(prevProps,prevState) {\n        if (prevState.lat !== this.state.lat) {\n            console.log(prevProps)    \n\n            const lat = this.state.lat;\n            const lng = this.state.lng;\n         \n        fetch (`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/db3b0ba27138ac7fdc854f5529ba7e78/${lat},${lng}`)\n        .then (results => results.json())\n        .then (response => {\n            this.setState ({\n                temperature: response.currently.temperature,\n                humidity: response.currently.humidity,\n                wind: response.currently.windSpeed,\n                icon: response.currently.icon,\n                precipType: response.currently.precipType,  \n                precipProbability: response.currently.precipProbability,\n                summary: response.currently.summary,\n\n            })\n            console.log(response)\n            console.log(lat,lng)\n            \n        })\n    } else {console.log('error', prevProps.lat, this.props.data)}\n    } \n    \n    render () {\n        return (\n            <div>\n                <SearchBar \n                update = {this.update} \n                />\n                <WeatherDisplay \n                    data = {this.state}\n                />\n                \n            </div>\n            \n        )\n    }\n}\n\nexport default Display","import React from 'react';\nimport './style.css';\n\nimport Header from './Header'\nimport Display from './Display'\n\n\nfunction App () {\n  return(\n    <div>\n      <Header />\n      <Display />\n    </div>\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css'\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}